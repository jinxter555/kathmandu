watchman warning:  Recrawled this watch 3 times, most recently because:
dir missing from internal stateTo resolve, please review the information on
https://facebook.github.io/watchman/docs/troubleshooting.html#recrawl
To clear this warning, run:
`watchman watch-del /home/jt/nodejs/kathmandu/todo ; watchman watch-project /home/jt/nodejs/kathmandu/todo`

(node:30031) DeprecationWarning: collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.
(node:30031) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
  console.log openMongo.js:27
    MongoDB Connected to: env test

  console.dir test/person_schema.test.js:103
    { [Function: model]
      hooks:
       Kareem {
         _pres: Map { 'save' => [Array], 'remove' => [Array] },
         _posts: Map { 'save' => [Array], 'init' => [Array] } },
      base:
       Mongoose {
         connections: [ [NativeConnection] ],
         models:
          { people: [Function],
            WorkUsers: [Function],
            WorkProgramOwner: [Function],
            WorkCompany: [Circular] },
         modelSchemas:
          { people: [Schema],
            WorkUsers: [Schema],
            WorkProgramOwner: [Schema],
            WorkCompany: [Schema] },
         options: { pluralization: true },
         _pluralize: [Function: pluralize],
         plugins: [ [Array], [Array], [Array], [Array] ] },
      modelName: 'WorkCompany',
      model: [Function: model],
      db:
       NativeConnection {
         base:
          Mongoose {
            connections: [Array],
            models: [Object],
            modelSchemas: [Object],
            options: [Object],
            _pluralize: [Function: pluralize],
            plugins: [Array] },
         collections:
          { peoples: [NativeCollection],
            workusers: [NativeCollection],
            WorkProgramOwner: [NativeCollection] },
         models:
          { people: [Function],
            WorkUsers: [Function],
            WorkProgramOwner: [Function],
            WorkCompany: [Circular] },
         config: { autoIndex: true },
         replica: false,
         options: null,
         otherDbs: [],
         relatedDbs: {},
         states:
          { '0': 'disconnected',
            '1': 'connected',
            '2': 'connecting',
            '3': 'disconnecting',
            '99': 'uninitialized',
            disconnected: 0,
            connected: 1,
            connecting: 2,
            disconnecting: 3,
            uninitialized: 99 },
         _readyState: 1,
         _closeCalled: false,
         _hasOpened: true,
         '$internalEmitter':
          EventEmitter { _events: [Object], _eventsCount: 1, _maxListeners: 0 },
         _listening: false,
         _connectionOptions:
          { useNewUrlParser: true, promiseLibrary: [Function: Promise] },
         name: 'kathmandu_test',
         host: 'localhost',
         port: 27017,
         user: null,
         pass: null,
         client:
          MongoClient {
            _events: {},
            _eventsCount: 0,
            _maxListeners: undefined,
            s: [Object],
            topology: [Server] },
         '$initialConnection': Promise { [Circular] },
         db:
          Db {
            _events: [Object],
            _eventsCount: 3,
            _maxListeners: undefined,
            s: [Object],
            serverConfig: [Getter],
            bufferMaxEntries: [Getter],
            databaseName: [Getter] } },
      discriminators: undefined,
      '$appliedMethods': true,
      WorkCompany: [AsyncFunction],
      '$appliedHooks': true,
      schema:
       Schema {
         obj: { name: [Object], description: [Object] },
         paths:
          { name: [SchemaString],
            description: [SchemaString],
            _id: [ObjectId],
            __v: [SchemaNumber],
            __type: [SchemaString] },
         aliases: {},
         subpaths: {},
         virtuals: { id: [VirtualType] },
         singleNestedPaths: {},
         nested: {},
         inherits: {},
         callQueue: [],
         _indexes: [ [Array], [Array] ],
         methods: {},
         methodOptions: {},
         statics: { WorkCompany: [AsyncFunction] },
         tree:
          { name: [Object],
            description: [Object],
            _id: [Object],
            __v: [Function: Number],
            id: [VirtualType],
            __type: [Object] },
         query: {},
         childSchemas: [],
         plugins: [ [Object] ],
         s: { hooks: [Kareem] },
         _userProvidedOptions:
          { discriminatorKey: '__type', collection: 'WorkProgramOwner' },
         options:
          { discriminatorKey: '__type',
            collection: 'WorkProgramOwner',
            typeKey: 'type',
            id: true,
            noVirtualId: false,
            _id: true,
            noId: false,
            validateBeforeSave: true,
            read: null,
            shardKey: null,
            autoIndex: null,
            minimize: true,
            versionKey: '__v',
            capped: false,
            bufferCommands: true,
            strict: true,
            pluralization: true },
         _originalSchema:
          Schema {
            obj: [Object],
            paths: [Object],
            aliases: {},
            subpaths: {},
            virtuals: {},
            singleNestedPaths: {},
            nested: {},
            inherits: {},
            callQueue: [],
            _indexes: [Array],
            methods: {},
            methodOptions: {},
            statics: [Object],
            tree: [Object],
            query: {},
            childSchemas: [],
            plugins: [],
            s: [Object],
            _userProvidedOptions: {},
            options: [Object],
            _originalSchema: undefined,
            '$globalPluginsApplied': undefined,
            '$isRootDiscriminator': undefined,
            _events: [Object],
            _eventsCount: 1 },
         '$globalPluginsApplied': true,
         discriminatorMapping: { key: '__type', value: 'WorkCompany', isRoot: false },
         '$isRootDiscriminator': true,
         _requiredpaths: [ 'description', 'name' ] },
      collection:
       NativeCollection {
         collection: Collection { s: [Object] },
         opts:
          { bufferCommands: true,
            capped: false,
            '$wasForceClosed': undefined },
         name: 'WorkProgramOwner',
         collectionName: 'WorkProgramOwner',
         conn:
          NativeConnection {
            base: [Mongoose],
            collections: [Object],
            models: [Object],
            config: [Object],
            replica: false,
            options: null,
            otherDbs: [],
            relatedDbs: {},
            states: [Object],
            _readyState: 1,
            _closeCalled: false,
            _hasOpened: true,
            '$internalEmitter': [EventEmitter],
            _listening: false,
            _connectionOptions: [Object],
            name: 'kathmandu_test',
            host: 'localhost',
            port: 27017,
            user: null,
            pass: null,
            client: [MongoClient],
            '$initialConnection': [Promise],
            db: [Db] },
         queue: [],
         buffer: false,
         emitter:
          EventEmitter { _events: {}, _eventsCount: 0, _maxListeners: undefined } },
      Query:
       { [Function]
         base:
          Query {
            toConstructor: [Function: toConstructor],
            setOptions: [Function],
            collection: [Function: collection],
            collation: [Function],
            '$where': [Function],
            where: [Function],
            equals: [Function: equals],
            eq: [Function: eq],
            or: [Function: or],
            nor: [Function: nor],
            and: [Function: and],
            gt: [Function],
            gte: [Function],
            lt: [Function],
            lte: [Function],
            ne: [Function],
            in: [Function],
            nin: [Function],
            all: [Function],
            regex: [Function],
            size: [Function],
            maxDistance: [Function],
            minDistance: [Function],
            mod: [Function],
            exists: [Function],
            elemMatch: [Function],
            within: [Function: within],
            box: [Function],
            polygon: [Function],
            circle: [Function],
            near: [Function: near],
            intersects: [Function: intersects],
            geometry: [Function: geometry],
            select: [Function: select],
            slice: [Function],
            sort: [Function],
            limit: [Function],
            skip: [Function],
            maxScan: [Function],
            batchSize: [Function],
            comment: [Function],
            maxTimeMS: [Function],
            maxTime: [Function],
            snapshot: [Function],
            hint: [Function],
            j: [Function: j],
            slaveOk: [Function],
            setReadPreference: [Function],
            read: [Function],
            r: [Function],
            readConcern: [Function],
            tailable: [Function],
            w: [Function: writeConcern],
            writeConcern: [Function: writeConcern],
            wTimeout: [Function: wtimeout],
            wtimeout: [Function: wtimeout],
            merge: [Function],
            find: [Function],
            cursor: [Function: cursor],
            findOne: [Function],
            count: [Function],
            distinct: [Function],
            update: [Function: update],
            updateMany: [Function: updateMany],
            updateOne: [Function: updateOne],
            replaceOne: [Function: replaceOne],
            remove: [Function],
            deleteOne: [Function],
            deleteMany: [Function],
            findOneAndUpdate: [Function],
            findOneAndDelete: [Function],
            findOneAndRemove: [Function],
            _findAndModify: [Function],
            _wrapCallback: [Function],
            setTraceFunction: [Function],
            exec: [Function: exec],
            thunk: [Function],
            then: [Function],
            stream: [Function],
            selected: [Function: selected],
            selectedInclusively: [Function: selectedInclusively],
            selectedExclusively: [Function: selectedExclusively],
            _mergeUpdate: [Function],
            _optionsForExec: [Function],
            _fieldsForExec: [Function],
            _updateForExec: [Function],
            _ensurePath: [Function],
            _validate: [Function] } },
      '$__insertMany': [Function],
      '$init': Promise { <pending> },
      '$caught': true }

PASS test/person_schema.test.js (6.241s)
  person
    ✓ teste disc (62ms)
    ○ skipped 3 tests

Test Suites: 1 passed, 1 total
Tests:       3 skipped, 1 passed, 4 total
Snapshots:   0 total
Time:        6.793s
Ran all test suites matching /test\/person_schema.test.js/i.
